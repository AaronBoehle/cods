#!/bin/bash

# check for the utilities we'll need
# these should be available on a default osx install
prereqs=(perl dig ssh scp)
for tool in ${prereqs[@]}; do
    which $tool >/dev/null
    if [[ $? -ne 0 ]]; then
        echo "Please install '$tool' before continuing."
        exit 1
    fi
done

heading(){
    echo '----------------------------------'
    echo "> $@"
    echo '----------------------------------'
}

if [[ -e ./.env ]]; then
    echo 'It looks like things are already setup, aborting...'
    echo 'To redo the setup process, delete the ".env" file'
    exit 1
fi

read -p 'Enter the servers ip address: ' ip
echo
echo 'Since this will be the first time we will have connected to your server,'
echo 'you will be prompted whether or not you trust the server. Type yes when'
echo 'prompted.'
echo
# make sure we can access that server
ssh root@$ip ls > /dev/null
if [[ $? -ne 0 ]]; then
    echo "Cannot login to $ip!"
    exit 1
fi

read -p "Enter a username (default $USER): " user
if [[ -z "$user" ]]; then
    user=$USER
fi

echo
echo 'We will need an email address for obtaining a ssl certificate, while this'
echo 'is optional, it is recommended so that you can be contacted if anything'
echo 'goes wrong with your site.'
read -p 'email: ' email
echo

password=$(LC_ALL=C tr -cd 'a-zA-Z0-9' < /dev/urandom | head -c 16)
db_password=$(LC_ALL=C tr -cd 'a-zA-Z0-9' < /dev/urandom | head -c 16)

echo "Here are your auto-generated passwords for the server:"
echo
echo "Sudo Password: $password" | tee -a "$BASE_DIR/credentials.txt"
echo "DB Password:   $db_password" | tee -a "$BASE_DIR/credentials.txt"
echo
echo 'These have been saved to "credentials.txt".'
echo
echo '+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Warning ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+'
echo '| For security purposes, it is advised you delete the credentials.txt  |'
echo '| file and move these into a password manager                          |'
echo '+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+'
echo
read -p 'Press <Enter> to continue and setup the server'

# create the .env file
cat > $ENV_FILE <<EOF
ip=$ip
user=$user
email=$email
EOF

echo '".env" file created!'

heading 'running provision script'

ssh root@$ip bash < $SCRIPTS/provision.sh | tee $BASE_DIR/provision.log

heading 'securing mysql installation...'

# secure the mysql install
ssh root@$ip 'mysql -u root' <<sql
CREATE USER $user@localhost IDENTIFIED BY '$db_password';
GRANT ALL ON *.* TO $user@localhost WITH GRANT OPTION;
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('$db_password');
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
FLUSH PRIVILEGES;
sql

echo 'MySQL configured!'

heading 'creating user'

ssh root@$ip bash <<setup_user
# create a user add add the ssh key
useradd --create-home --shell /bin/bash --groups sudo,tomcat $user
echo '$user:$password' | chpasswd
# copy over ssh key config for the new user
mkdir -p /home/$user/.ssh
cp \$HOME/.ssh/authorized_keys /home/$user/.ssh/
chown --recursive $user:$user /home/$user/.ssh

# disable password login + root login
perl -i -pe 's/(PasswordAuthentication\s*)yes/\1no/' /etc/ssh/sshd_config
perl -i -pe 's/(PermitRootLogin\s*)yes/\1no/' /etc/ssh/sshd_config
service sshd restart
service ssh restart
setup_user

echo 'User created and ssh locked down!'

heading 'all done!'
