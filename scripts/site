#!/bin/bash

list_sites() {
    ssh $user@$ip 'ls -1 /etc/nginx/sites-available' | grep -v '^default$'
}

create_site() {
    domain=$1

    if [[ -z $domain ]]; then
        read -p 'Enter the site name without the www: ' domain
    fi

    # verify dns records
    if [[ "$(dig +short ${domain})" != $ip ]]; then
        echo 'It looks like the dns records for that domain are not setup to'
        echo 'point to your server.'
        read -p 'Continue anyway? (y/n) ' confirm
        grep -i '^y' <<< $confirm || exit 1
    fi

    echo "Setting up ${domain}..."

    ssh -t $user@$ip "
    set -e
    # tomcat config
    echo 'Configuring tomcat...'
    sudo perl -i -pe 's!^.*--## Virtual Hosts ##--.*\$!$&\n\
    <Host name=\"${domain}\" appBase=\"${domain}\" unpackWARs=\"true\" autoDeploy=\"true\" />!' \
        /opt/tomcat/conf/server.xml
    sudo mkdir -p /opt/tomcat/${domain}
    sudo chown -R tomcat:tomcat /opt/tomcat/${domain}
    sudo chmod -R g+w /opt/tomcat/${domain}
    echo 'Restarting tomcat...'
    sudo systemctl restart tomcat

    sudo mkdir -p /var/www/${domain}/uploads
    sudo chmod a+rw /var/www/${domain}/uploads

    # nginx config
    echo 'Configuring nginx...'
    echo '$(sed -e s/{{domain}}/${domain}/g -e s/{{user}}/${user}/g $TEMPLATES/site.nginx.conf)' |\
        sudo tee /etc/nginx/sites-available/${domain} >/dev/null
    sudo ln -s /etc/nginx/sites-available/${domain} /etc/nginx/sites-enabled/${domain}
    echo 'Restarting nginx...'
    sudo systemctl restart nginx
    "
    [[ $? -eq 0 ]] && echo "${domain} created!"
}

enable_ssl() {
    domain=$1
    if [[ -z $domain ]]; then
        read -p 'Enter the domain: ' domain
    fi

    # verify dns records
    if [[ "$(dig +short ${domain})" != $ip ]]; then
        echo 'It looks like the dns records for that domain are not setup to'
        echo 'point to your server. This is necessary for https. Aborting...'
        exit 1
    fi

    ssh -t $user@$ip "
    mkdir -p \$HOME/${domain}
    sudo letsencrypt certonly\
        --authenticator webroot\
        --webroot-path=/var/www/${domain}\
        --domain ${domain}\
        --agree-tos\
        --email $email\
        --renew-by-default >> \$HOME/letsencrypt.log

    if [[ $? -ne 0 ]]; then
	    echo 'It looks like something went wrong! Check the above output for more details.'
        exit 1
    fi

    echo '$(sed -e s/{{domain}}/${domain}/g -e s/{{user}}/${user}/g $TEMPLATES/ssl-site.nginx.conf)' |\
        sudo tee /etc/nginx/sites-available/${domain} >/dev/null
    sudo systemctl restart nginx
    "

    [[ $? -eq 0 ]] && echo "https enabled for ${domain}!"

}

remove_site() {
    site=$1
    if [[ -z "$site" ]]; then
        read -p 'Enter the name of the site to remove: ' site
    fi
    ssh -t $user@$ip "
    ls /etc/nginx/sites-available | grep '^$site$' >/dev/null 2>&1
    if [[ \$? -ne 0 ]]; then
        echo 'That site does not exist!'
        exit 1
    fi

    sudo sed -i -e '/${site}/d' /opt/tomcat/conf/server.xml

    sudo rm -f /etc/nginx/sites-available/${site}
    sudo rm -f /etc/nginx/sites-enabled/${site}
    sudo rm -rf /opt/tomcat/${site}
    sudo rm -rf /opt/tomcat/conf/Catalina/${site}
    sudo rm -rf /var/www/${site}
    "

    [[ $? -eq 0 ]] && echo 'site removed!'
}

deploy_site() {
    site=$1
    war_filepath="$2"

    if [[ -z "$site" ]]; then
        read -p 'Enter the name of the site you want to deploy to: ' site
    fi

    if [[ -z "$war_filepath"  ]]; then
        read -ep 'Enter the path to the war file: ' war_filepath
        # parse the home directory correctly
        if grep '^~' <<< "$war_filepath"; then
            war_filepath=$(perl -pe "s!~!$HOME!" <<< $war_filepath)
        fi
    fi

    # ensure file exists and is a war (or at least has the extension)
    if [[ ! -f $war_filepath ]]; then
        echo 'It looks like that file does not exist!'
        exit 1
    fi
    grep '\.war$' >/dev/null <<< $war_filepath
    if [[ $? -ne 0 ]]; then
        echo 'must be a valid .war file'
        exit 1
    fi

    # ensure site exists
    list_sites | grep "^$site$" >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        echo 'That site does not exist!'
        exit 1
    fi

    scp $war_filepath $user@$ip:/opt/tomcat/$site/ROOT.war
}


show_help() {
    cat <<help
site -- command for managing sites setup on your server
usage

    ./server site <command>

where <command> is one of the following:

    list
    create    [sitename]
    remove    [sitename]
    enablessl [sitename]
    deploy    [sitename [/path/to/site.war]]

help
}

command=$1
shift

case $command in
    create)    create_site $@;;
    list|ls)   list_sites;;
    remove|rm) remove_site $@;;
    deploy)    deploy_site $@;;
    enablessl) enable_ssl $@;;
    *)         show_help;;
esac
