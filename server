#!/bin/bash

# letsencrypt asks us to choose a random minute of the hour to run the renewal
# job
auto_renew_certs() {
    ssh -t $user@$ip '
    grep "/usr/bin/letsencrypt renew"<<< "$(sudo crontab -l)" >/dev/null
    if [[ $? -eq 0 ]]; then
        echo "Already setup to auto renew certs!"
        exit
    fi
    sudo crontab <<< "$(sudo crontab -l)
@daily sleep \$((\${RANDOM} % 60))m; /usr/bin/letsencrypt renew"
    '
}

upload_file() {
    file=$1
    destination=$2

    if [[ -z $file ]]; then
        read -ep 'File to upload: ' file
    fi

    if [[ ! -e $file ]]; then
        echo 'It appears as tough that file does not exist!'
        exit 1
    fi

    scp $file $user@$ip:$destination
}

restart_service() {
    service_name=$1
    if [[ -z $service_name ]]; then
        read -p 'service to restart: ' service_name
    fi
    ssh -t $user@$ip "sudo systemctl restart $service_name"
    [[ $? -eq 0 ]] && echo "$service_name restarted!"
}

add_user() {
    user=$1
    sshkeyfile=$2
    if [[ -z $user ]]; then
        read -p 'new username: ' user
    fi
    if [[ -z $sshkeyfile ]]; then
        read -ep 'ssh key file path: ' sshkeyfile
    fi
    if [[ ! -f $sshkeyfile ]]; then
        echo 'Please enter a valid ssh key file.'
        exit 1
    fi

    read -sp 'password for the new user: ' password
    echo
    read -sp 'confirm password: ' password
    echo

    echo "Creating user ${user}..."

    ssh -t $user@$ip "
    sudo useradd --create-home --shell /bin/bash --groups sudo,tomcat $user
    echo '$user:$password' | sudo chpasswd
    cat '$(cat $sshkeyfile)' | sudo tee /home/$user/.ssh/authorized_keys >/dev/null
    sudo chown --recursive $user:$user /home/$user
    "
    [[ $? -eq 0 ]] && echo "User ${user} created!"
}

add_sshkey() {
    sshkeyfile=$1
    if [[ -z $sshkeyfile ]]; then
        read -ep 'Path to the key file: ' sshkeyfile
    fi
    if [[ ! -f $sshkeyfile ]]; then
        echo 'Please enter a valid ssh key file path.'
        exit 1
    fi

    cat $sshkey | ssh $user@$ip 'cat >> .ssh/authorized_keys'
    [[ $? -eq 0 ]] && echo 'ssh key added!'
}

show_info() {
    cat <<info
Information about your server:

ip address: $ip
login:      $user

MySQL port: 3306
ssh port:   22

info
}

show_usage() {
    cat <<help_message
server -- command for server management

commands

    login
    upload  [file [destination]]
    restart [servicename]
    addkey  [sshkeyfile]
    adduser [username [sshkeyfile]]
    info
    ping
    autorenew
    reboot

help_message
}

if [[ ! -f .env ]]; then
    echo 'It looks like you do not have a server setup yet, please'
    echo 'run the setup script first.'
    exit 1
fi

source .env

command=$1
shift

case $command in
    login)
        ssh $user@$ip;;
    upload)
        upload_file $@;;
    restart)
        restart_service $@;;
    reboot)
        ssh -t $user@$ip 'sudo reboot';;
    info)
        show_info;;
    adduser)
        add_user $@;;
    addkey)
        add_sshkey $@;;
    autorenew)
        auto_renew_certs;;
    ping)
        echo 'Press Ctrl-C to exit.'
        ping -c5 $ip;;
    *)
        show_usage;;
esac
